<div class="page-width page-width--cart page-content">

  {%- render 'breadcrumbs' -%}

  <header class="section-header text-center{% if cart.item_count == 0 %} section-header--404{% endif %}">
    <h1 class="section-header__title">{{ 'cart.general.title' | t }}</h1>
    <div class="rte text-spacing">
      {%- if cart.item_count == 0 -%}
        <p>{{ 'cart.general.empty' | t }}</p>
        <hr class="hr--clear hr--small">
        <p>
          <a href="{{ routes.root_url }}" class="btn">{{ 'cart.general.continue_shopping' | t }}</a>
        </p>
      {%- endif -%}
    </div>
  </header>

  {%- if cart.item_count > 0 -%}
    <form action="{{ routes.cart_url }}" method="post" novalidate data-location="page" id="CartPageForm">
      <div class="cart__page">
        <div class="cart__page-col">
          <div data-products>
            {% for item in cart.items %}
{% if item.product.type == 'Freebie' %}
              {%- render 'cart-item-freebie-remove-icon', product: item, sizes: '150px', -%}
{% elsif item.product.type == 'Custom Discount' %}
              {%- render 'cart-item-freebie-no-remove-icon', product: item, sizes: '150px', -%}
{% else %}
              {%- render 'cart-item', product: item, sizes: '150px', -%}
{% endif %}
            {% endfor %}
          </div>

          {%- render 'cart-recommendations', location: 'page' -%}
        </div>
        <div class="cart__page-col">
          {% if settings.cart_notes_enable %}
            <div class="cart__item-row">
              <label for="CartNote" class="add-note">
                {{ 'cart.general.note' | t }}
                <span class="note-icon note-icon--open" aria-hidden="true">
                  <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-pencil" viewBox="0 0 64 64"><defs><style>.cls-1{fill:none;stroke:#000;stroke-width:2px;stroke-miterlimit:10}</style></defs><path class="cls-1" d="M52 33.96V58H8V14h23.7"/><path class="cls-1" d="m18 47 13-5 24-24-8-8-24 24-5 13zm5-13 8 8"/><path id="svg_2" data-name="svg 2" d="m47 10 1-1a5.44 5.44 0 0 1 7.82.18A5.52 5.52 0 0 1 56 17l-1 1" style="fill:none;stroke:#000;stroke-width:2px"/></svg>
                </span>
                <span class="note-icon note-icon--close">
                  <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-close" viewBox="0 0 64 64"><path d="m19 17.61 27.12 27.13m0-27.13L19 44.74" style="fill:none;stroke:#000;stroke-miterlimit:10;stroke-width:2px"/></svg>
                  <span class="icon__fallback-text">{{ 'general.accessibility.close' | t }}</span>
                </span>
              </label>
              <textarea name="note" class="input-full cart__note hide" id="CartNote">{{ cart.note }}</textarea>
            </div>
          {% endif %}

          <div class="cart__item-sub cart__item-row cart__item--subtotal">
            <div>{{ 'cart.general.subtotal' | t }}</div>
            <div data-subtotal>
              {%- render 'price' with cart.total_price -%}
            </div>
          </div>

          <div data-discounts>
            {% if cart.cart_level_discount_applications != blank %}
              <div class="cart__discounts text-right">
                <div>
                  {% for cart_discount in cart.cart_level_discount_applications %}
                    {%- assign savings = cart_discount.total_allocated_amount | money -%}
                    <div class="cart__discount">
                      {{ 'cart.general.savings_html' | t: saved_amount: savings }}
                      ({{ cart_discount.title }})
                    </div>
                  {% endfor %}
                </div>
              </div>
            {% endif %}
          </div>

          {% if settings.cart_terms_conditions_enable %}
            <div class="cart__item-row cart__terms">
              <input type="checkbox" id="CartTerms" class="cart__terms-checkbox">
              <label for="CartTerms" class="text-label">
                <small>
                  {% if settings.cart_terms_conditions_page != blank %}
                    {{ 'cart.general.terms_html' | t: url: settings.cart_terms_conditions_page.url }}
                  {% else %}
                    {{ 'cart.general.terms' | t }}
                  {% endif %}
                </small>
              </label>
            </div>
          {% endif %}

          <div class="cart__item-row cart__checkout-wrapper">
            <button type="submit" name="checkout" data-terms-required="{{ settings.cart_terms_conditions_enable }}" class="btn cart__checkout" disabled>
              {{ 'cart.general.checkout' | t }}
            </button>

            {% if additional_checkout_buttons and settings.cart_additional_buttons %}
              <div class="additional-checkout-buttons">{{ content_for_additional_checkout_buttons }}</div>
            {% endif %}

            {% comment %}<a href="{{ routes.all_products_collection_url }}" class="btn btn--secondary cart__continue">{% endcomment %}
            <a href="javascript:history.back()" class="btn btn--secondary cart__continue">
              {{ 'cart.general.continue_shopping' | t }}
            </a>
          </div>

          <div class="cart__item-row text-center">
            <small>{{ 'cart.general.shipping_at_checkout' | t }}</small>
          </div>
        </div>
      </div>
    </form>
  {%- endif -%}
</div>

<script>
    // Define the variant ID
    var variantId = 47491841392955;

    // Check the cart total and add/remove item accordingly
    function checkCartTotal() {
        getCart().then(cart => {
            if (cart.total_price >= 50000 && !cart.items.some(item => item.variant_id === variantId)) {
                addItem().then(() => location.reload());
            } else if (cart.total_price < 50000 && cart.items.some(item => item.variant_id === variantId)) {
                removeItem(variantId).then(() => location.reload());
            }
        });
    }

    // Check the cart total initially
    checkCartTotal();

    // Select the node that will be observed for mutations
    var targetNode = document.querySelector('div[data-subtotal]');

    // Options for the observer (which mutations to observe)
    var config = { attributes: true, childList: true, subtree: true };

    // Callback function to execute when mutations are observed
    var callback = function(mutationsList, observer) {
        for(var mutation of mutationsList) {
            if (mutation.type === 'childList') {
                checkCartTotal();
            }
        }
    };

    // Create an observer instance linked to the callback function
    var observer = new MutationObserver(callback);

    // Start observing the target node for configured mutations
    observer.observe(targetNode, config);

    // Function to get the cart
    function getCart() {
        return fetch('/cart.js', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            }
        }).then(response => response.json());
    }

    // Function to remove item from the cart based on variant ID
    function removeItem(variantId) {
        console.log("Initiating removeItem function");
        return getCart().then(cart => {
            var line = cart.items.findIndex(item => item.variant_id === variantId) + 1;
            if (line > 0) {
                console.log("Item found in the cart, removing it");
                return fetch('/cart/change.js', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        line: line,
                        quantity: 0
                    })
                });
            }
        });
    }

    // Function to clear the cart
    function clearCart() {
        console.log("Initiating clearCart function");
        return fetch('/cart/clear.js', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        }).then(() => {
            console.log("Cart cleared, reloading page");
            location.reload();
        });
    }

    // Function to check cart total and clear the cart if total is 0
    function checkCartAndClear() {
        getCart().then(cart => {
            if (cart.items.length > 0 && cart.total_price === 0) {
                clearCart();
            }
        });
    }

    // Call the function initially
    checkCartAndClear();

    // Select the node that will be observed for mutations
    var targetNode = document.querySelector('div[data-subtotal]');

    // Options for the observer (which mutations to observe)
    var config = { attributes: true, childList: true, subtree: true };

    // Callback function to execute when mutations are observed
    var callback = function(mutationsList, observer) {
        for(var mutation of mutationsList) {
            if (mutation.type === 'childList') {
                checkCartAndClear();
            }
        }
    };

    // Create an observer instance linked to the callback function
    var observer = new MutationObserver(callback);

    // Start observing the target node for configured mutations
    observer.observe(targetNode, config);


  window.onload = function() {
    // Select all buttons
    var buttons = document.getElementsByTagName('button');

    // Disable all buttons
    for (var i = 0; i < buttons.length; i++) {
        buttons[i].disabled = true;
    }

    // Enable all buttons after 4 seconds
    setTimeout(function() {
        for (var i = 0; i < buttons.length; i++) {
            buttons[i].disabled = false;
        }
    }, 2500);
};

</script>
                    

{% schema %}
{
  "name": "t:sections.main-cart.name"
}
{% endschema %}
