{% if customer.metafields.custom.customer_type == "food_vendor" %}
  <div id="yotpo-widgets-points-container-fv">
    <div class="yotpo-widget-instance" data-yotpo-instance-id="537747" id="yotpo-widget-1"></div>
  
    <div class="yotpo-widget-instance" data-yotpo-instance-id="626951" id="yotpo-widget-2"></div>
  </div>
  <div id="yotpo-widgets-container-fv">
    <div class="yotpo-widget-instance" data-yotpo-instance-id="537749"></div>
    <div class="yotpo-widget-instance" data-yotpo-instance-id="527520"></div>
    <div class="yotpo-widget-instance" data-yotpo-instance-id="527521"></div>
  </div>
{% elsif customer.metafields.custom.customer_type == "retailer" %}
  <div id="yotpo-widgets-points-container-r">
    <div class="yotpo-widget-instance" data-yotpo-instance-id="537747" id="yotpo-widget-1"></div>
  
    <div class="yotpo-widget-instance" data-yotpo-instance-id="626951" id="yotpo-widget-2"></div>
  </div>
  <div id="yotpo-widgets-container-r">
    <div class="yotpo-widget-instance" data-yotpo-instance-id="537749"></div>
    <div class="yotpo-widget-instance" data-yotpo-instance-id="527520"></div>
    <div class="yotpo-widget-instance" data-yotpo-instance-id="537723"></div>
  </div>
{% endif %}


<script>

// Select the nodes that will be observed for mutations
var targetNodeFV = document.getElementById('yotpo-widgets-container-fv');
var targetNodeR = document.getElementById('yotpo-widgets-container-r');

// Options for the observer (which mutations to observe)
var config = { attributes: true, childList: true, subtree: true };

// Callback function to execute when mutations are observed
var callback = function(mutationsList, observer) {
    for(let mutation of mutationsList) {
        if (mutation.type === 'childList') {
            console.log('A child node has been added or removed.');
        }
        else if (mutation.type === 'attributes') {
            console.log('The ' + mutation.attributeName + ' attribute was modified.');
        }
    }
};

// Create an observer instance linked to the callback function
var observerFV = new MutationObserver(callback);
var observerR = new MutationObserver(callback);

// Start observing the target node for configured mutations
observerFV.observe(targetNodeFV, config);
observerR.observe(targetNodeR, config);


  // Callback function to execute when mutations are observed
var callback = function(mutationsList, observer) {
    for(let mutation of mutationsList) {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
            console.log('The class attribute was modified.');

            // Select the nodes to be reloaded
            var nodeFV = document.getElementById('yotpo-widgets-points-container-fv');
            var nodeR = document.getElementById('yotpo-widgets-points-container-r');

            // Reload the nodes
            nodeFV.innerHTML = nodeFV.innerHTML;
            nodeR.innerHTML = nodeR.innerHTML;
        }
    }
};

// Create an observer instance linked to the callback function
var observerFV = new MutationObserver(callback);
var observerR = new MutationObserver(callback);

// Start observing the target node for configured mutations
observerFV.observe(targetNodeFV, config);
observerR.observe(targetNodeR, config);


  
// function reloadPointsBalanceTags() {
//   const targetTags = document.querySelectorAll('#yotpo-widgets-container .yotpo-points-balance-number');

//   if (targetTags.length > 0) {
//     // ... (rest of your code for reloading tags)
//   } else {
//     console.warn('Tags with class "yotpo-points-balance-number" not found within the container.');
//   }
// }

// // Call the function to start monitoring and updating
// reloadPointsBalanceTags();

// const observer = new MutationObserver(() => {
//   // Code to execute when mutations occur within the container
//   console.log("Mutation detected in yotpo-widgets-container");
//   // You can perform specific actions based on the type of mutation here
// });

// observer.observe(document.getElementById('yotpo-widgets-container'), { childList: true, subtree: true });

</script>

