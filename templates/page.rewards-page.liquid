{% if customer.metafields.custom.customer_type == "food_vendor" %}
  <div class="yotpo-widget-instance" data-yotpo-instance-id="537747" id="yotpo-widget-1"></div>

  <div class="yotpo-widget-instance" data-yotpo-instance-id="626951" id="yotpo-widget-2"></div>
  
  <div class="yotpo-widget-instance" data-yotpo-instance-id="537749"></div>

  <div class="yotpo-widget-instance" data-yotpo-instance-id="527520"></div>

  <div class="yotpo-widget-instance" data-yotpo-instance-id="527521"></div>
{% elsif customer.metafields.custom.customer_type == "retailer" %}
  <div class="yotpo-widget-instance" data-yotpo-instance-id="537747" id="yotpo-widget-1"></div>

  <div class="yotpo-widget-instance" data-yotpo-instance-id="626951" id="yotpo-widget-2"></div>

  <div class="yotpo-widget-instance" data-yotpo-instance-id="537749"></div>

  <div class="yotpo-widget-instance" data-yotpo-instance-id="527520"></div>

  <div class="yotpo-widget-instance" data-yotpo-instance-id="537723"></div>
{% endif %}|


<script>
// 1. Ensure element exists before accessing it
const yotpoWidgetDiv = document.querySelector('#yotpo-widget-2');

// 2. Handle asynchronous loading (if applicable)
if (!yotpoWidgetDiv) {
  // Add a fallback mechanism, like checking for the element
  // periodically or waiting for a specific event
  console.warn("Yotpo widget with ID 'yotpo-widget-2' not found yet.");
  return; // Or implement your preferred waiting/handling logic
}

function reloadWidget() {
  console.log("Reloading Yotpo widget with ID yotpo-widget-2");

  // 3. Verify iframe access if applicable
  if (yotpoWidgetDiv.tagName.toLowerCase() === 'iframe') {
    yotpoWidgetDiv = yotpoWidgetDiv.contentWindow.document; // Access iframe content
  }

  // 4. Handle potential race conditions (optional)
  // Consider using setTimeout or promises if necessary

  yotpoWidgetDiv.location.reload(true); // Reload iframe content
}

// 5. Trigger reload when appropriate
// Place this where you want to trigger the reload
// (e.g., button click, DOM change, etc.)
reloadWidget();

// 6. Consider potential timing issues
// Ensure the script executes after the widget is fully loaded
// or use event listeners like DOMContentLoaded

  const observer = new MutationObserver(() => {
  console.log("DOM change detected");
});

observer.observe(document, { childList: true, subtree: true });


</script>

